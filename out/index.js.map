{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from 'chalk'\r\nimport { spawn } from 'child_process'\r\nimport { config as dotenv } from 'dotenv'\r\nimport { readFileSync, writeFileSync } from 'fs'\r\nimport inquirer from 'inquirer'\r\nimport path from 'path'\r\nimport { NodeSetupConfig, PackageJson } from './types'\r\n\r\ndotenv()\r\n\r\nconst appPath = path.resolve(process.cwd()).split('node_modules')[0]\r\n\r\nconst defaultConfig: NodeSetupConfig = {\r\n  packageManager: process.env.PACKAGE_MANAGER || '',\r\n  envVars: [],\r\n}\r\n\r\nconst packageJsonPath = path.join(appPath, 'package.json')\r\n\r\nconst packageJson: PackageJson = JSON.parse(\r\n  readFileSync(packageJsonPath, 'utf8'),\r\n)\r\n\r\nconst config: NodeSetupConfig = {\r\n  ...defaultConfig,\r\n  ...packageJson['node-setup'],\r\n}\r\n\r\nasync function setupPackageManager() {\r\n  if (!config.packageManager) {\r\n    const packageManagerPrompt = await inquirer.prompt([\r\n      {\r\n        type: 'list',\r\n        name: 'packageManager',\r\n        message: 'Package manager',\r\n        choices: [\r\n          {\r\n            name: 'npm',\r\n            value: 'npm',\r\n          },\r\n          {\r\n            name: 'pnpm',\r\n            value: 'pnpm',\r\n          },\r\n          {\r\n            name: 'yarn',\r\n            value: 'yarn',\r\n          },\r\n        ],\r\n      },\r\n    ])\r\n\r\n    config.packageManager = packageManagerPrompt.packageManager\r\n\r\n    packageJson['node-setup'] = config\r\n\r\n    writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2))\r\n  }\r\n\r\n  const child = spawn(config.packageManager, ['-v'], {\r\n    stdio: 'ignore',\r\n    shell: true,\r\n  })\r\n\r\n  return new Promise((resolve, reject) => {\r\n    child.on('error', reject)\r\n    child.on('close', (code) => (code === 0 ? resolve(code) : reject()))\r\n  })\r\n    .then(() => {\r\n      console.log(\r\n        chalk.blackBright('Using'),\r\n        chalk.blueBright(config.packageManager),\r\n      )\r\n    })\r\n    .catch(async () => {\r\n      if (config.packageManager === 'pnpm') {\r\n        console.log(\r\n          chalk.redBright(`\\n${config.packageManager} is not installed.`),\r\n        )\r\n\r\n        const installPrompt = await inquirer.prompt([\r\n          {\r\n            type: 'confirm',\r\n            name: 'install',\r\n            message: `Install ${config.packageManager}?`,\r\n            default: true,\r\n          },\r\n        ])\r\n\r\n        if (installPrompt.install) {\r\n          const child = spawn('npm', ['i', '-g', 'pnpm'], {\r\n            stdio: 'inherit',\r\n            shell: true,\r\n          })\r\n\r\n          return new Promise((resolve, reject) => {\r\n            child.on('error', reject)\r\n            child.on('close', (code) =>\r\n              code === 0 ? resolve(true) : reject(false),\r\n            )\r\n          })\r\n        }\r\n        return false\r\n      } else {\r\n        console.log(\r\n          chalk.redBright(\r\n            `\\n${config.packageManager} is not installed. Please install it and try again.`,\r\n          ),\r\n        )\r\n        return false\r\n      }\r\n    })\r\n}\r\n\r\nasync function setupEnv() {\r\n  const processEnv: Record<string, string> = {}\r\n  dotenv({ processEnv })\r\n\r\n  const envPrompt = await inquirer.prompt([\r\n    {\r\n      type: 'input',\r\n      name: 'envName',\r\n      message: 'Environment file name',\r\n      default: '.env',\r\n    },\r\n  ])\r\n\r\n  const allEnvKeys = [\r\n    ...new Set([...Object.keys(processEnv), ...config.envVars]),\r\n  ]\r\n\r\n  const dotEnvPath = path.join(appPath, envPrompt.envName)\r\n\r\n  const createEnvVarPrompt = async () =>\r\n    await inquirer.prompt([\r\n      {\r\n        type: 'list',\r\n        name: 'envVar',\r\n        message: 'Environment variables',\r\n        choices: [\r\n          ...allEnvKeys.map((envVar) => ({\r\n            name: processEnv[envVar]\r\n              ? `${envVar}: ${processEnv[envVar]}`\r\n              : envVar,\r\n            value: envVar,\r\n          })),\r\n          new inquirer.Separator(),\r\n          {\r\n            name: 'Save and exit',\r\n            value: 'save',\r\n          },\r\n          new inquirer.Separator(),\r\n        ],\r\n      },\r\n    ])\r\n\r\n  const createEditEnvVarPrompt = async (varName: string) =>\r\n    await inquirer.prompt([\r\n      {\r\n        type: 'input',\r\n        name: 'envVar',\r\n        message: `Value for ${varName}`,\r\n        default: processEnv[varName] ?? '',\r\n      },\r\n    ])\r\n\r\n  let envVarPrompt = await createEnvVarPrompt()\r\n\r\n  while (envVarPrompt.envVar !== 'save') {\r\n    const envPrompt = await createEditEnvVarPrompt(envVarPrompt.envVar)\r\n    processEnv[envVarPrompt.envVar] = envPrompt.envVar\r\n    envVarPrompt = await createEnvVarPrompt()\r\n  }\r\n\r\n  console.log(\r\n    chalk.blackBright('\\nSaving environment variables to'),\r\n    chalk.blueBright(dotEnvPath),\r\n  )\r\n\r\n  let envFile = ''\r\n\r\n  for (const [key, value] of Object.entries(processEnv)) {\r\n    envFile += `${key}=${value}\\n`\r\n  }\r\n\r\n  writeFileSync(dotEnvPath, envFile)\r\n}\r\n\r\nasync function main() {\r\n  console.log(chalk.blackBright('Setting up package manager\\n'))\r\n  await setupPackageManager()\r\n  console.log(chalk.blackBright('\\nSetting up environment variables\\n'))\r\n  await setupEnv()\r\n  console.log(chalk.green('\\n✓'), chalk.blackBright('Done'))\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-floating-promises\r\nmain()\r\n\r\nexport { NodeSetupConfig, PackageJson, defaultConfig, setupEnv }\r\n\r\n"]}